@page "/Adults"
@using Models
@using FileData
@using Assignment1.Data
@inject NavigationManager NavigationManager
@inject IPersonService PersonService
<h3>Adults</h3>
<div>
    Filter by Name: <input type="text" @oninput="((arg)=>FilterByName(arg))" style="width: 50px"/>
</div>

@if (adultsToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
} else if (!adultsToShow.Any()){
    <p>
        <em>No Adults items exist. Please add some</em>
    </p>
}   else{
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Hair Color</th>
            <th>Eye Color</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
            <th>Works as:</th>
            <th>Salary</th>
            <AuthorizeView>
            <th>Remove</th>
            <th>Edit</th>
            </AuthorizeView>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in adultsToShow)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@item.Sex</td>
                <td>@item.JobTitle.JobTitle</td>
            <td>@item.JobTitle.Salary</td>
                <AuthorizeView>
                <td>
                    <button @onclick="@(() => RemoveAdult(item.Id))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>
                <td>
                    <button @onclick="@(() => Edit(item.Id))">
                        <i class="oi oi-pencil" style="color:blue"/>
                    </button>
                </td>
                </AuthorizeView>
            </tr>
        }
        </tbody>
    </table>
    
}

@code {
    private IList<Adult> adultsAll;
    private IList<Adult> adultsToShow;

    private string? filterByName;
    

    protected override async Task OnInitializedAsync()
    {
        adultsAll = new List<Adult>();
        adultsAll = PersonService.GetAll();
        adultsToShow = new List<Adult>();
        adultsToShow = adultsAll;
    }

    private void FilterByName(ChangeEventArgs args)
    {
        filterByName = null;
        try
        {
            filterByName = args.Value.ToString();
        }
        catch (Exception e){ }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        adultsToShow = adultsAll.Where(a=>
            filterByName !=null && a.LastName.Contains(filterByName) || filterByName == null).ToList();
    }

    private void RemoveAdult(int AdultId)
    {
        Adult toRemove = adultsAll.First(a => a.Id == AdultId);
        PersonService.RemovePerson(AdultId);
        adultsAll.Remove(toRemove);
        adultsToShow.Remove(toRemove);
    }

    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"Edit/{id}");
    }
}